% oak_prep_init(initfile,time,ap,diag)
% Input
% ap: cell array of function handler {fun1,fun2,...}
%   each functions is called as s = fun1(time) where time is the mjd and s a structure with the following fields
%        
% s.variables
% s.names
% s.gridX
% s.gridY
% s.gridZ
% s.value
% s.mask
% s.rmse
% s.diag
%
% all fields have the same meaning as for OAK except s.diag which is a function called with the 
% diagnostic key as a parameter


function oak_prep_init(initfile,time,ap,diag)

fid = fopen(initfile,'w');


fprintf(fid,'# generated by %s\n\n',mfilename);
        
        
for n = 1:length(time);
    t = time(n);
    clear datat
    j = 0;
    
    for i = 1:length(ap);      
        tmp = ap{i}(t);
        
        if ~isempty(tmp) 
          j = j+1;
          datat(j) = tmp;
        end
        
    end

    date = gregd2(t,'YYYYMMDD');
    prefix = sprintf('Obs%03g.',n);
    putinitval(fid,[prefix 'time'],gregd2(time(n),'YYYY-MM-DDThh:mm:ss'));
    putinitval(fid,[prefix 'variables'],  {datat.variables});
    
    putinitval(fid,[prefix 'names'],      {datat.names});
    putinitval(fid,[prefix 'gridX'],      {datat.gridX});
    putinitval(fid,[prefix 'gridY'],      {datat.gridY});
    putinitval(fid,[prefix 'gridZ.const'],{datat.gridZ});

    putinitval(fid,[prefix 'value'],{datat.value});
    putinitval(fid,[prefix 'mask'] ,{datat.mask});
    putinitval(fid,[prefix 'rmse'] ,{datat.rmse});

    
    % diagnostics
    prefix = sprintf('Diag%03g.',n);

    for j = 1:length(diag);
      val = {};
      for i = 1:length(datat);
        val{i} = datat(i).diag(diag{j});
      end    

      putinitval(fid,[prefix diag{j}],val);
    end
    
    
    putinitval(fid,[prefix 'path' ],sprintf('Analysis%03g/',n));
    putinitval(fid,sprintf('Analysis%03g.path',n),sprintf('Analysis%03g/',n));
    fprintf(fid,'\n#------------------------------------------------------------------------------------\n\n');
    
end


fclose(fid);
